# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from low_level_interface/lli_ctrl_request.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class lli_ctrl_request(genpy.Message):
  _md5sum = "89a86354005db1fc65181bcc6d834320"
  _type = "low_level_interface/lli_ctrl_request"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8 steering
int8 velocity
int8 transmission
int8 differential_front
int8 differential_rear
int8 ctrl_code
"""
  __slots__ = ['steering','velocity','transmission','differential_front','differential_rear','ctrl_code']
  _slot_types = ['int8','int8','int8','int8','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       steering,velocity,transmission,differential_front,differential_rear,ctrl_code

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(lli_ctrl_request, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.steering is None:
        self.steering = 0
      if self.velocity is None:
        self.velocity = 0
      if self.transmission is None:
        self.transmission = 0
      if self.differential_front is None:
        self.differential_front = 0
      if self.differential_rear is None:
        self.differential_rear = 0
      if self.ctrl_code is None:
        self.ctrl_code = 0
    else:
      self.steering = 0
      self.velocity = 0
      self.transmission = 0
      self.differential_front = 0
      self.differential_rear = 0
      self.ctrl_code = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6b().pack(_x.steering, _x.velocity, _x.transmission, _x.differential_front, _x.differential_rear, _x.ctrl_code))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.steering, _x.velocity, _x.transmission, _x.differential_front, _x.differential_rear, _x.ctrl_code,) = _get_struct_6b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6b().pack(_x.steering, _x.velocity, _x.transmission, _x.differential_front, _x.differential_rear, _x.ctrl_code))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.steering, _x.velocity, _x.transmission, _x.differential_front, _x.differential_rear, _x.ctrl_code,) = _get_struct_6b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6b = None
def _get_struct_6b():
    global _struct_6b
    if _struct_6b is None:
        _struct_6b = struct.Struct("<6b")
    return _struct_6b
